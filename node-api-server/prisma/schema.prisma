// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schemas
enum DeploymentStatus {
  pending
  running
  success
  failed
}

enum LogLevel {
  info
  warn
  error
  debug
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  passwordHash String?  @map("password_hash")
  githubId     String?  @map("github_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  projects    Project[]
  deployments Deployment[] @relation("UserTriggeredDeployments")
}

model Project {
  id            Int      @id @default(autoincrement())
  userId        Int      @map("user_id")
  name          String
  gitUrl        String   @map("git_url")
  defaultBranch String   @default("main") @map("default_branch")
  rootDirectory String?  @default("/") @map("root_directory")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user             User               @relation(fields: [userId], references: [id])
  deployments      Deployment[]
  analyticsEvent   AnalyticsEvent[]
  analyticsSummary AnalyticsSummary[]
  domainMapping    DomainMapping[]
}

model Deployment {
  id            Int              @id @default(autoincrement())
  projectId     Int              @map("project_id")
  buildId       String?          @map("build_id")
  triggeredById Int?             @map("triggered_by")
  commitHash    String?          @map("commit_hash")
  branch        String           @default("main")
  status        DeploymentStatus @default(pending)
  startedAt     DateTime?        @map("started_at")
  finishedAt    DateTime?        @map("finished_at")
  createdAt     DateTime         @default(now()) @map("created_at")

  project     Project         @relation(fields: [projectId], references: [id])
  triggeredBy User?           @relation("UserTriggeredDeployments", fields: [triggeredById], references: [id])
  logs        DeploymentLog[]
}

model DeploymentLog {
  id           Int      @id @default(autoincrement())
  deploymentId Int      @map("deployment_id")
  logLevel     LogLevel @default(info) @map("log_level")
  message      String
  loggedAt     DateTime @map("logged_at")

  deployment Deployment @relation(fields: [deploymentId], references: [id])
}

model DomainMapping {
  id        Int      @id @default(autoincrement())
  projectId Int
  domain    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id])
}

model AnalyticsEvent {
  id         Int      @id @default(autoincrement())
  projectId  Int
  path       String
  ip         String
  country    String?
  region     String?
  city       String?
  deviceType String?
  os         String?
  browser    String?
  createdAt  DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id])
}

model AnalyticsSummary {
  id        Int    @id @default(autoincrement())
  projectId Int
  date      DateTime
  views     Int    @default(0)

  project Project @relation(fields: [projectId], references: [id])

  @@unique([projectId, date])
}